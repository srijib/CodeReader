package com.wkswind.codereader.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wkswind.codereader.database.DocType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOC_TYPE".
*/
public class DocTypeDao extends AbstractDao<DocType, Long> {

    public static final String TABLENAME = "DOC_TYPE";

    /**
     * Properties of entity DocType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Extensions = new Property(1, String.class, "extensions", false, "EXTENSIONS");
        public final static Property ScanRoot = new Property(2, String.class, "scanRoot", false, "SCAN_ROOT");
        public final static Property Id = new Property(3, Long.class, "id", true, "_id");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
    };


    public DocTypeDao(DaoConfig config) {
        super(config);
    }
    
    public DocTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOC_TYPE\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"EXTENSIONS\" TEXT," + // 1: extensions
                "\"SCAN_ROOT\" TEXT," + // 2: scanRoot
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 3: id
                "\"STATUS\" INTEGER," + // 4: status
                "\"REMARK\" TEXT);"); // 5: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOC_TYPE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DocType entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String extensions = entity.getExtensions();
        if (extensions != null) {
            stmt.bindString(2, extensions);
        }
 
        String scanRoot = entity.getScanRoot();
        if (scanRoot != null) {
            stmt.bindString(3, scanRoot);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    /** @inheritdoc */
    @Override
    public DocType readEntity(Cursor cursor, int offset) {
        DocType entity = new DocType( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // extensions
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // scanRoot
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // remark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DocType entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setExtensions(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScanRoot(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DocType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DocType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
